from flask import Flask, request, jsonify, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)

# MySQL database connection string
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@localhost/employee_management'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# Define Models
class PositionType(db.Model):
    __tablename__ = 'position_types'
    id = db.Column(db.Integer, primary_key=True)
    type_name = db.Column(db.String(50), nullable=False)

class Position(db.Model):
    __tablename__ = 'positions'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    position_type_id = db.Column(db.Integer, db.ForeignKey('position_types.id'), nullable=False)
    hourly_rate = db.Column(db.Float, nullable=False)

class Site(db.Model):
    __tablename__ = 'sites'
    id = db.Column(db.Integer, primary_key=True)
    site_name = db.Column(db.String(100), nullable=False)
    city = db.Column(db.String(100))
    zip_code = db.Column(db.String(10))

class Schedule(db.Model):
    __tablename__ = 'schedules'
    id = db.Column(db.Integer, primary_key=True)
    schedule_name = db.Column(db.String(50), nullable=False)

class Salary(db.Model):
    __tablename__ = 'salaries'
    id = db.Column(db.Integer, primary_key=True)
    hourly_rate = db.Column(db.Float, nullable=False)

class Employee(db.Model):
    __tablename__ = 'employees'
    id = db.Column(db.Integer, primary_key=True)
    employee_id = db.Column(db.String(50), unique=True, nullable=False)
    name = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(255))
    position_id = db.Column(db.Integer, db.ForeignKey('positions.id'), nullable=False)
    schedule_id = db.Column(db.Integer, db.ForeignKey('schedules.id'), nullable=False)
    salary_id = db.Column(db.Integer, db.ForeignKey('salaries.id'))
    site_id = db.Column(db.Integer, db.ForeignKey('sites.id'))
    contact_number = db.Column(db.String(15))
    email = db.Column(db.String(100))
    clock_in = db.Column(db.DateTime)
    clock_out = db.Column(db.DateTime)
    hours_worked = db.Column(db.Float)

# Routes for the admin dashboard

@app.route("/")
def dashboard():
    employees = Employee.query.all()
    positions = Position.query.all()
    sites = Site.query.all()
    schedules = Schedule.query.all()
    salaries = Salary.query.all()
    return render_template("dashboard.html", employees=employees, positions=positions, 
                           sites=sites, schedules=schedules, salaries=salaries)

@app.route("/employee/add", methods=["GET", "POST"])
def add_employee():
    if request.method == "POST":
        new_employee = Employee(
            employee_id=request.form['employee_id'],
            name=request.form['name'],
            address=request.form['address'],
            position_id=request.form['position_id'],
            schedule_id=request.form['schedule_id'],
            salary_id=request.form.get('salary_id'),
            site_id=request.form.get('site_id'),
            contact_number=request.form['contact_number'],
            email=request.form['email']
        )
        db.session.add(new_employee)
        db.session.commit()
        return redirect(url_for('dashboard'))
    positions = Position.query.all()
    schedules = Schedule.query.all()
    salaries = Salary.query.all()
    sites = Site.query.all()
    return render_template("add_employee.html", positions=positions, schedules=schedules,
                           salaries=salaries, sites=sites)

@app.route("/employee/delete/<int:id>")
def delete_employee(id):
    employee = Employee.query.get(id)
    if employee:
        db.session.delete(employee)
        db.session.commit()
    return redirect(url_for('dashboard'))

@app.route("/employee/update/<int:id>", methods=["GET", "POST"])
def update_employee(id):
    employee = Employee.query.get(id)
    if request.method == "POST":
        employee.name = request.form['name']
        employee.address = request.form['address']
        employee.position_id = request.form['position_id']
        employee.schedule_id = request.form['schedule_id']
        employee.salary_id = request.form.get('salary_id')
        employee.site_id = request.form.get('site_id')
        employee.contact_number = request.form['contact_number']
        employee.email = request.form['email']
        db.session.commit()
        return redirect(url_for('dashboard'))
    positions = Position.query.all()
    schedules = Schedule.query.all()
    salaries = Salary.query.all()
    sites = Site.query.all()
    return render_template("update_employee.html", employee=employee, positions=positions, 
                           schedules=schedules, salaries=salaries, sites=sites)

if __name__ == "__main__":
    app.run(debug=True)
